
// Functions with types
const getNewAuthUsingRefreshMutation = async (
  client: ApolloClient<any> // Use generic type for client
): Promise<string> => {
  try {
    const { data }: { data: RefreshTokenMutationResponse } = await client.mutate({
      mutation: /* your refresh token mutation */,
      // Replace with the actual mutation definition for refreshing tokens
    });
    return data.refreshTokens.accessToken;
  } catch (error) {
    console.error('Failed to refresh auth token:', error);
    // Handle the error appropriately, e.g., redirect to login page
  }
};

const errorLink = onError(async ({ graphQLErrors, networkError, operation }) => {
  if (graphQLErrors) {
    graphQLErrors.forEach(({ message, locations, path }) =>
      console.error(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)
    );
  }
  if (networkError) console.error(`[Network error]: ${networkError}`);

  // Check for specific GraphQL errors indicating expired token:
  if (graphQLErrors && graphQLErrors.some((error) => error.extensions.code === 'UNAUTHENTICATED')) {
    try {
      const newAccessToken = await getNewAuthUsingRefreshMutation(client);
      // Update the authorization header with the new token
      authLink.setContext((existingHeaders) => ({
        ...existingHeaders,
        authorization: newAccessToken ? `Bearer ${newAccessToken}` : '',
      }));
      // Retry the operation with the updated header
      await operation.retry();
    } catch (error) {
      console.error('Failed to refresh token and retry request:', error);
      // Handle the error appropriately, e.g., redirect to login page
    }
  }
});

const authLink = setContext((request, { headers }) => {
  // Include the initial authorization header with the refresh token
  return {
    headers: {
      ...headers,
      authorization: refreshToken ? `Bearer ${refreshToken}` : '',
    },
  };
});

const httpLink = new HttpLink({
  uri: 'YOUR_BACKEND_URL', // Replace with your actual backend URL
});

const link = from([errorLink, authLink, httpLink]);

const client = new ApolloClient({
  cache: new InMemoryCache(),
  link,
});

export default function Home() {
  return (
    <ApolloProvider client={client}>
      <main className="container p-20">
        <div>
          <AllTodoApollo />
        </div>
      </main>
    </ApolloProvider>
  );
}
